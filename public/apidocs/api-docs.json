{  
  "swagger":"2.0",
  "info":{  
    "title":"Cents API",
    "description":"Examine your life decisions RESTfully.",
    "version":"2.0.0"
  },
  "paths":{  
    "/careers":{  
      "get":{  
        "tags":[  
          "careers"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"No records were found."
          }
        },
        "description":"",
        "summary":"Returns names of all available careers.",
        "operationId":"Api::V2::CareersController#show_two"
      }
    },
    "/careers/compare":{  
      "post":{  
        "tags":[  
          "careers"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "400":{  
            "description":"No careers were in the careers array."
          },
          "404":{  
            "description":"No data on some careers."
          }
        },
        "description":"This route is intended for internal use. The order parameter is optional, but if you use it, you must use it in exactly two career objects. Its value is either 1 or 2.",
        "summary":"Returns data on two careers.",
        "operationId":"Api::V2::CareersController#show_two",
        "parameters":[  
          {  
            "in":"body",
            "description":"object with array of career objects and optional operation",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/Career_body"
            }
          }
        ]
      }
    },
    "/careers/{name}":{  
      "get":{  
        "tags":[  
          "careers"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"School does not exist."
          }
        },
        "description":"",
        "summary":"Returns data for a career.",
        "operationId":"Api::V2::CareersController#show",
        "parameters":[  
          {  
            "in":"path",
            "description":"a career name",
            "name":"name",
            "required":true,
            "type":"string"
          }
        ]
      }
    },
    "/careers/{name}/{rating}":{  
      "put":{  
        "tags":[  
          "careers"
        ],
        "responses":{  
          "200":{  
            "description":"Rating was saved."
          },
          "404":{  
            "description":"Career does not exist."
          }
        },
        "description":"This will insert a new rating if none is present, or update the current rating if there is one.",
        "summary":"Allows a user to rate a career.",
        "operationId":"Api::V2::CareersController#rate",
        "parameters":[
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          },   
          {  
            "in":"path",
            "description":"a career name",
            "name":"name",
            "required":true,
            "type":"string"
          },
          {  
            "in":"path",
            "description":"an integer between 0 and 5 inclusive",
            "name":"rating",
            "required":true,
            "type":"integer",
            "enum":[
              "0", "1", "2", "3", "4", "5"
            ]
          },
          {  
            "in":"body",
            "description":"a user ID",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/UserIDBody"
            }
          }
        ]
      }
    },
    "/cost_of_living":{  
      "get":{  
        "tags":[  
          "cost of living"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"No record were found."
          }
        },
        "description":"Get a list of all available locations at https://trycents.com/api/v2/cost_of_living; both parameters are optional.",
        "summary":"Returns names of locations that have cost of living data.",
        "operationId":"Api::V2::Coli#index",
        "parameters":[  
          {  
            "in":"query",
            "description":"whether to show only state names",
            "name":"only_state_names",
            "required":false,
            "type":"boolean"
          },
          {  
            "in":"query",
            "description":"a US state name",
            "name":"state",
            "required":false,
            "type":"string"
          }
        ]
      }
    },
    "/cost_of_living/compare":{  
      "post":{  
        "tags":[  
          "cost of living"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "400":{  
            "description":"No objects were in the locations array."
          },
          "404":{  
            "description":"No data on city or state for some locations."
          }
        },
        "description":"This route is intended for internal use. The order parameter is optional, but if you use it, you must use it in exactly two location objects. Its value is either 1 or 2.",
        "summary":"Returns cost of living information for two locations.",
        "operationId":"Api::V2::Coli#show_two",
        "parameters":[  
          {  
            "in":"body",
            "description":"object with array of location objects and optional operation",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/Cost_of_living_body"
            }
          }
        ]
      }
    },
    "/cost_of_living/{state}":{  
      "get":{  
        "tags":[  
          "cost of living"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"State does not exist."
          }
        },
        "description":"",
        "summary":"Returns information on all available locations for a state.",
        "operationId":"Api::V2::Coli#show_state",
        "parameters":[  
          {  
            "in":"path",
            "description":"a US state",
            "name":"state",
            "required":true,
            "type":"string"
          }
        ]
      }
    },
    "/cost_of_living/{state}/{city}":{  
      "get":{  
        "tags":[  
          "cost of living"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"State or city does not exist."
          }
        },
        "description":"",
        "summary":"Returns cost of living information for a city.",
        "operationId":"Api::V2::Coli#show_city",
        "parameters":[  
          {  
            "in":"path",
            "description":"a US state name",
            "name":"state",
            "required":true,
            "type":"string"
          },
          {  
            "in":"path",
            "description":"the name of a city in the state",
            "name":"city",
            "required":true,
            "type":"string"
          }
        ]
      }
    },
    "/degrees":{  
      "get":{  
        "tags":[  
          "degrees"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"No records were found."
          }
        },
        "description":"Get a list of all available degrees at https://trycents.com/api/v2/degrees; both parameters are optional. If you don't know the exact name of the level you want (Bachelor's Degree? Bachelor of Arts?), enter the first part of the name. The API will return a list of substring matches.",
        "summary":"Returns a list of all available degrees.",
        "parameters":[  
          {  
            "in":"query",
            "description":"whether to show only bachelor, masters, etc., degrees",
            "name":"only_level_names",
            "required":false,
            "type":"boolean"
          },
          {  
            "in":"query",
            "description":"bachelor, masters, etc.",
            "name":"level",
            "required":false,
            "type":"string"
          }
        ]
      }
    },
    "/degrees/compare":{  
      "post":{  
        "tags":[  
          "degrees"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "400":{  
            "description":"No objects were in the degrees array."
          },
          "404":{  
            "description":"No data for some degrees."
          }
        },
        "description":"This route is intended for internal use. The order parameter is optional, but if you use it, you must use it in exactly two degree objects. Its value is either 1 or 2.",
        "summary":"Returns degree information for two degrees.",
        "operationId":"Api::V2::DegreesController#show_two",
        "parameters":[  
          {  
            "in":"body",
            "description":"object with array of degree objects and optional operation",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/Degree_body"
            }
          }
        ]
      }
    },
    "/degrees/{level}/{name}":{  
      "get":{  
        "tags":[  
          "degrees"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"Degree does not exist."
          }
        },
        "description":"",
        "summary":"Returns information on all degrees that start with {level} and have the name {name}.",
        "operationId":"Api::V2::DegreesController#show_level_name",
        "parameters":[  
          {  
            "in":"path",
            "description":"a degree level",
            "name":"level",
            "required":true,
            "type":"string"
          },
          {  
            "in":"path",
            "description":"a degree name",
            "name":"name",
            "required":true,
            "type":"string"
          }
        ]
      }
    },
    "/degrees/{level}/{name}/{rating}":{  
      "put":{  
        "tags":[  
          "degrees"
        ],
        "responses":{  
          "200":{  
            "description":"Rating was added."
          },
          "404":{  
            "description":"Degree does not exist."
          }
        },
        "description":"This route will add a rating if it doesn't exist, or update the rating if it does.",
        "summary":"Allows a user to rate a degree.",
        "operationId":"Api::V2::DegreesController#rate",
        "parameters":[
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          },   
          {  
            "in":"path",
            "description":"bachelor, masters, etc.",
            "name":"level",
            "required":true,
            "type":"string"
          },
          {  
            "in":"path",
            "description":"a degree name",
            "name":"name",
            "required":true,
            "type":"string"
          },
          {  
            "in":"path",
            "description":"an integer between 0 and 5 inclusive",
            "name":"rating",
            "required":true,
            "type":"integer",
            "enum":[  
              "0",
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          {  
            "in":"body",
            "description":"a user ID",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/UserIDBody"
            }
          }
        ]
      }
    },
    "/degrees/{name}":{  
      "get":{  
        "tags":[  
          "degrees"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"Degree does not exist."
          }
        },
        "description":"",
        "summary":"Returns information on all degrees of all levels with that name.",
        "operationId":"Api::V2::DegreesController#show",
        "parameters":[  
          {  
            "in":"path",
            "description":"a degree name",
            "name":"name",
            "required":true,
            "type":"string"
          }
        ]
      }
    },
    "/schools":{  
      "get":{  
        "tags":[  
          "schools"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"No records were found."
          }
        },
        "description":"Get a list of all available schools at https://trycents.com/api/v2/schools; both parameters are optional. If you don't know the exact name of the school you want (\"Harvard?\" \"Harvard University?\"), enter part of the name. The API will return a list of substring matches.",
        "summary":"Returns a list of all available schools.",
        "parameters":[  
          {  
            "in":"query",
            "description":"whether to show only available school locations",
            "name":"only_location_names",
            "required":false,
            "type":"boolean"
          },
          {  
            "in":"query",
            "description":"city or postal abbreviation for US state",
            "name":"location",
            "required":false,
            "type":"string"
          }
        ]
      }
    },
    "/schools/compare":{  
      "post":{  
        "tags":[  
          "schools"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "400":{  
            "description":"No schools were in the schools array."
          },
          "404":{  
            "description":"No data on some schools."
          }
        },
        "description":"This route is intended for internal use. The order parameter is optional, but if you use it, you must use it in exactly two school objects. Its value is either 1 or 2.",
        "summary":"Returns data on two schools.",
        "operationId":"Api::V2::SchoolsController#show_two",
        "parameters":[  
          {  
            "in":"body",
            "description":"object with array of school objects and optional operation",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/School_body"
            }
          }
        ]
      }
    },
    "/schools/location/{location}":{  
      "get":{  
        "tags":[  
          "schools"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"Location does not exist."
          }
        },
        "description":"",
        "summary":"Returns information on all available schools for a location.",
        "operationId":"Api::V2::SchoolsController#show_location",
        "parameters":[  
          {  
            "in":"path",
            "description":"city or postal abbreviation for US state",
            "name":"location",
            "required":true,
            "type":"string",
            "default":"Princeton, NJ"
          }
        ]
      }
    },
    "/schools/{name}":{  
      "get":{  
        "tags":[  
          "schools"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"School does not exist."
          }
        },
        "description":"",
        "summary":"Returns data for a school.",
        "operationId":"Api::V2::SchoolsController#show_state_name",
        "parameters":[  
          {  
            "in":"path",
            "description":"a school name",
            "name":"name",
            "required":true,
            "type":"string"
          }
        ]
      }
    },
    "/schools/{name}/{rating}":{  
      "put":{  
        "tags":[  
          "schools"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"School does not exist."
          }
        },
        "description":"This route will add a new rating if none exists, or update the current rating if it does.",
        "summary":"Allows a user to rate a school.",
        "operationId":"Api::V2::SchoolsController#rate",
        "parameters":[  
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          }, 
          {  
            "in":"path",
            "description":"a school name",
            "name":"name",
            "required":true,
            "type":"string"
          },
          {  
            "in":"path",
            "description":"an integer between 0 and 5 inclusive",
            "name":"rating",
            "required":true,
            "type":"integer",
            "enum":[
              "0", "1", "2", "3", "4", "5"
            ]
          },
          {  
            "in":"body",
            "description":"a user ID",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/UserIDBody"
            }
          }
        ]
      }
    },
    "/users":{  
      "post":{  
        "tags":[  
          "users"
        ],
        "description":"This route will return a user ID that you can use with other user routes.",
        "summary":"Registers a new user.",
        "operationId":"Api::V2::UsersController#create",
        "parameters":[  
          {  
            "in":"body",
            "description":"object with array of career objects and optional operation",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/User_body"
            }
          }
        ],
        "responses":{  
          "200":{  
            "description":"User was registered.",
            "schema":{  
              "$ref":"#/definitions/IDReponse"
            }
          },
          "400":{  
            "description":"The user data didn't meet the requirements."
          }
        }
      }
    },
    "/users/{id}":{  
      "get":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"There is a user with that ID."
          },
          "404":{  
            "description":"There is no user with that ID."
          }
        },
        "description":"",
        "summary":"Gets profile data for a user.",
        "operationId":"Api::V2::UsersController#show",
        "parameters":[
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          },  
          {  
            "in":"path",
            "description":"a user ID",
            "name":"id",
            "required":true,
            "type":"integer"
          }
        ]
      },
      "patch":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"Changes saved."
          },
          "404":{  
            "description":"There is no user with that ID."
          },
          "500":{  
            "description":"Error while saving."
          }
        },
        "description":"Update any of a user's fields by passing in a list of objects with names a values. Although the value type is listed here as string, the value type must match the field type.",
        "summary":"Updates a user's fields.",
        "operationId":"Api::V2::UsersController#update",
        "parameters":[ 
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          },  
          {  
            "in":"path",
            "description":"a user ID",
            "name":"id",
            "required":true,
            "type":"integer"
          },
          {  
            "in":"body",
            "description":"object with array of field objects",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/Fields"
            }
          }
        ]
      }
    },
    "/users/{id}/completed":{  
      "get":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"The user was found."
          },
          "404":{  
            "description":"No such user was found."
          }
        },
        "parameters":[  
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          }, 
          {  
            "in":"path",
            "description":"a user ID",
            "name":"id",
            "required":true,
            "type":"integer"
          }
        ],
        "description":"",
        "summary":"Shows which sections a user has completed.",
        "operationId":"Api::V2::UsersController#show_completed"
      },
      "post":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"User was found."
          },
          "404":{  
            "description":"No such user was found."
          }
        },
        "description":"",
        "summary":"Record that a user has completed a section.",
        "operationId":"Api::V2::UserController#create_completed",
        "parameters":[
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          },   
          {  
            "in":"path",
            "description":"a user ID",
            "name":"id",
            "required":true,
            "type":"integer"
          },
          {  
            "in":"body",
            "description":"object with section field",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/Completed_body"
            }
          }
        ]
      }
    },
    "/users/{id}/query":{  
      "get":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"The user was found."
          },
          "404":{  
            "description":"No such user was found."
          }
        },
        "parameters":[ 
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          },  
          {  
            "in":"path",
            "description":"a user ID",
            "name":"id",
            "required":true,
            "type":"integer"
          }
        ],
        "description":"",
        "summary":"Shows a user's past queries.",
        "operationId":"Api::V2::UsersController#show_query"
      },
      "post":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"User was found."
          },
          "404":{  
            "description":"No such user was found."
          }
        },
        "description":"",
        "summary":"Record that a user has made a query.",
        "operationId":"Api::V2::UserController#create_query",
        "parameters":[
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          },   
          {  
            "in":"path",
            "description":"a user ID",
            "name":"id",
            "required":true,
            "type":"integer"
          },
          {  
            "in":"body",
            "description":"object with query field",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/QueryBody"
            }
          }
        ]
      }
    },
    "/users/{id}/ratings":{  
      "get":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"The user was found."
          },
          "404":{  
            "description":"No such user was found."
          }
        },
        "parameters":[
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          },   
          {  
            "in":"path",
            "description":"a user ID",
            "name":"id",
            "required":true,
            "type":"integer"
          }
        ],
        "description":"",
        "summary":"Shows all items a user has rated.",
        "operationId":"Api::V2::UsersController#show_ratings"
      }
    },
    "/users/{id}/spending_breakdown":{  
      "get":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"User was found."
          },
          "404":{  
            "description":"No such user ID was found."
          }
        },
        "description":"",
        "summary":"Loads all spending breakdown data for a user.",
        "operationId":"Api::V2::SpendingBreakdownController#show",
        "parameters":[
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          },   
          {  
            "in":"path",
            "description":"a user ID",
            "name":"id",
            "required":true,
            "type":"integer"
          }
        ]
      }
    },
    "/users/{id}/spending_breakdown/{category}":{  
      "patch":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"Data was deleted."
          },
          "400":{  
            "description":"Each field object must have a name and value."
          },
          "404":{  
            "description":"No such user was found."
          },
          "500":{  
            "description":"Server error while saving."
          }
        },
        "description":"Use this route to save a few individual spending breakdown items.",
        "summary":"Saves new spending breakdown data.",
        "operationId":"Api::V2::SpendingBreakdownController#update",
        "parameters":[
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          },   
          {  
            "in":"path",
            "description":"a user ID",
            "name":"id",
            "required":true,
            "type":"integer"
          },
          {  
            "in":"path",
            "description":"a spending breakdown category",
            "name":"category",
            "required":true,
            "type":"string",
            "enum":[  
              "default",
              "student",
              "custom"
            ]
          },
          {  
            "in":"body",
            "description":"object with array of spending breakdown data",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/SB_body"
            }
          }
        ]
      },
      "put":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"Data was deleted."
          },
          "400":{  
            "description":"Each field object must have a name and value."
          },
          "404":{  
            "description":"No such user was found."
          },
          "500":{  
            "description":"Server error while saving."
          }
        },
        "description":"Use this route to replace all spending breakdown data for a category with whatever you send. This route could be used to reset to a default.",
        "summary":"Updates all spending breakdown data by category.",
        "operationId":"Api::V2::SpendingBreakdownController#update_all",
        "parameters":[ 
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          },  
          {  
            "in":"path",
            "description":"a user ID",
            "name":"id",
            "required":true,
            "type":"integer"
          },
          {  
            "in":"path",
            "description":"a spending breakdown category",
            "name":"category",
            "required":true,
            "type":"string",
            "enum":[  
              "default",
              "student",
              "custom"
            ]
          },
          {  
            "in":"body",
            "description":"object with array of spending breakdown data",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/SB_body"
            }
          }
        ]
      },
      "get":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"Records were found."
          },
          "404":{  
            "description":"No records were found."
          }
        },
        "description":"",
        "summary":"Gets spending breakdown data by category.",
        "operationId":"Api::V2::SpendingBreakdownController#show_category",
        "parameters":[  
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          }, 
          {  
            "in":"path",
            "description":"a user ID",
            "name":"id",
            "required":true,
            "type":"integer"
          },
          {  
            "in":"path",
            "description":"a spending breakdown category",
            "name":"category",
            "required":true,
            "type":"string",
            "enum":[  
              "default",
              "student",
              "custom"
            ]
          }
        ]
      }
    },
    "/users/{id}/spending_breakdown/{category}/{name}":{  
      "delete":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"Data was deleted."
          }
        },
        "description":"",
        "summary":"Deletes a single spending breakdown item.",
        "operationId":"Api::V2::SpendingBreakdownController#destroy",
        "parameters":[
          {  
            "in":"query",
            "description":"the API key you've been assigned",
            "name":"api_key",
            "required":true,
            "type":"string"
          },   
          {  
            "in":"path",
            "description":"a user ID",
            "name":"id",
            "required":true,
            "type":"integer"
          },
          {  
            "in":"path",
            "description":"a spending breakdown category",
            "name":"category",
            "required":true,
            "type":"string",
            "enum":[  
              "default",
              "student",
              "custom"
            ]
          },
          {  
            "in":"path",
            "description":"the name of the spending breakdown item",
            "name":"name",
            "required":true,
            "type":"string"
          }
        ]
      }
    },
    "/users/new":{  
      "get":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"The form was returned."
          }
        },
        "description":"Find the form at https://trycents.com/api/v2/users/new. This widget won't redirect you.",
        "summary":"Redirects to a form that registers new users.",
        "operationId":"Api::V2::UsersController#register"
      }
    },
    "/users/validate":{  
      "post":{  
        "tags":[  
          "users"
        ],
        "responses":{  
          "200":{  
            "description":"Authentication successful.",
            "schema":{  
              "$ref":"#/definitions/IDReponse"
            }
          },
          "400":{  
            "description":"Authentication failed."
          }
        },
        "description":"This route will return a user ID that you can use with other user routes.",
        "summary":"Validate a username and password.",
        "operationId":"Api::V2::UsersController#validate",
        "parameters":[  
          {  
            "in":"body",
            "description":"object with password field",
            "name":"body",
            "required":true,
            "schema":{  
              "$ref":"#/definitions/Validate_body"
            }
          }
        ]
      }
    }
  },
  "host":"trycents.com",
  "basePath":"/api/v2",
  "schemes":[  
    "https"
  ],
  "definitions":{  
    "Career_body":{  
      "type":"object",
      "properties":{  
        "operation":{  
          "type":"string"
        },
        "careers":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/Career"
          }
        }
      },
      "required":[  
        "careers"
      ]
    },
    "Career":{  
      "required":[  
        "name"
      ],
      "properties":{  
        "name":{  
          "type":"string"
        },
        "order":{  
          "type":"integer",
          "enum":[  
            1,
            2
          ]
        }
      }
    },
    "Cost_of_living_body":{  
      "type":"object",
      "properties":{  
        "operation":{  
          "type":"string"
        },
        "locations":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/Location"
          }
        }
      },
      "required":[  
        "locations"
      ]
    },
    "Location":{  
      "required":[  
        "city",
        "state"
      ],
      "properties":{  
        "city":{  
          "type":"string"
        },
        "state":{  
          "type":"string"
        },
        "order":{  
          "type":"integer",
          "enum":[  
            "1",
            "2"
          ]
        }
      }
    },
    "Degree_body":{  
      "type":"object",
      "properties":{  
        "operation":{  
          "type":"string"
        },
        "degrees":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/Degree"
          }
        }
      },
      "required":[  
        "degrees"
      ]
    },
    "Degree":{  
      "required":[  
        "name",
        "level"
      ],
      "properties":{  
        "name":{  
          "type":"string"
        },
        "level":{  
          "type":"string"
        },
        "order":{  
          "type":"integer",
          "enum":[  
            "1",
            "2"
          ]
        }
      }
    },
    "User_body":{  
      "type":"object",
      "properties":{  
        "first_name":{  
          "type":"string"
        },
        "last_name":{  
          "type":"string"
        },
        "email":{  
          "type":"string"
        },
        "password":{  
          "type":"string"
        },
        "password_confirmation":{  
          "type":"string"
        },
        "email_type":{  
          "type":"string"
        }
      },
      "required":[  
        "first_name",
        "last_name",
        "email",
        "password",
        "password_confirmation",
        "email_type"
      ]
    },
    "Validate_body":{  
      "required":[  
        "email",
        "password"
      ],
      "properties":{  
        "email":{  
          "type":"string"
        },
        "password":{  
          "type":"string"
        }
      }
    },
    "Password_body":{  
      "required":[  
        "password"
      ],
      "properties":{  
        "password":{  
          "type":"string"
        }
      }
    },
    "Validate_response":{  
      "properties":{  
        "name":{  
          "type":"string"
        },
        "id":{  
          "type":"integer"
        }
      }
    },
    "SB_body":{  
      "type":"object",
      "properties":{  
        "fields":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/Field"
          }
        }
      },
      "required":[  
        "fields"
      ]
    },
    "Field":{  
      "required":[  
        "name",
        "amount"
      ],
      "properties":{  
        "name":{  
          "type":"string"
        },
        "amount":{  
          "type":"integer"
        }
      }
    },
    "Completed_body":{  
      "type":"object",
      "properties":{  
        "section":{  
          "type":"string"
        }
      },
      "required":[  
        "section"
      ]
    },
    "School_body":{  
      "type":"object",
      "properties":{  
        "operation":{  
          "type":"string"
        },
        "schools":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/School"
          }
        }
      },
      "required":[  
        "schools"
      ]
    },
    "School":{  
      "required":[  
        "name"
      ],
      "properties":{  
        "name":{  
          "type":"string"
        },
        "order":{  
          "type":"integer",
          "enum":[  
            "1",
            "2"
          ]
        }
      }
    },
    "IDReponse":{  
      "type":"object",
      "required":[  
        "id"
      ],
      "properties":{  
        "id":{  
          "type":"integer"
        }
      }
    },
    "UserIDBody":{  
      "type":"object",
      "required":[  
        "user"
      ],
      "properties":{  
        "user":{  
          "type":"integer"
        }
      }
    },
    "QueryBody":{  
      "type":"object",
      "required":[  
        "url"
      ],
      "properties":{  
        "url":{  
          "type":"string"
        }
      }
    },
  	"Fields":{  
    	"type":"object",
      "properties":{ 
        "fields":{  
          "type":"array",
          "items":{  
            "$ref":"#/definitions/Field"
          }
        }
      },
      "required":[  
        "fields"
      ]
    },
    "Field":{  
      "required":[  
        "name", "value"
      ],
      "properties":{  
        "name":{  
          "type":"string"
        },
        "value":{  
          "type":"string"
        }
      }
    }
  }
}